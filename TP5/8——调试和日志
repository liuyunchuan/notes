##########################################################################################

调试和日志
	
	项目开发的时候，出现错误在所难免，最大的困惑在于发现问题所在，其次才是如何解决问题。因此懂得
	如何调试和跟踪问题非常之关键，5.0 版本提供了非常方便的调试工具和手段，让你更加容易定位和发现问题。

	未雨绸缪——页面Trace
	初见端倪——异常页面
	拨开见日——断点调试
	欲穷千里——日志分析
	运筹帷幄——远程调试



##########################################################################################

未雨绸缪————页面Trace

页面 Trace 是ThinkPHP 经典的调试手段，ThinkPHP5.0 继续发扬光大，已经可以支持不依赖页面显示。

页面 Trace 的主要作用包括：

查看运行数据；
查看文件加载情况；
查看运行流程；
查看当前执行SQL；
跟踪调试数据；
查看页面错误信息；

	
	系统默认不开启页面 Trace ：
		// 开启应用Trace调试
		'app_trace' =>  true,
		// 设置Trace显示方式
		'trace'     =>  [
		    // 在当前Html页面显示Trace信息
		    'type'  =>  'html',
		],

	如果你当前请求使用了数据库操作和查询的话，并且开启了数据库调试模式（注意，数据库调试模式可以单独开启，在数据库配置文件中配置开启
	debug 参数）会在 sql 一栏显示相关的 SQL 连接和查询信息。

	对于一些性能不高的查询尤其要引起注意，及早进行优化，如果要查看每个 SQL 查询和 EXPLAIN 信息，可以在数据库配置文件设置 sql_explain 
	参数如下：
		// 是否需要进行SQL性能分析
		'sql_explain'    => true,

	最后一栏是用户开发过程的调试输出，使用 trace 方式调试输出的信息不会在页面直接回显示，而是在 Trace 的调试一栏显示输出。

	trace('这是调试信息');
	tarce([1,2,3]);

	如果你不希望影响页面的输出效果，可以启用浏览器的 Trace 调试信息，设置如下：

		// 开启应用Trace调试
		'app_trace' =>  true,
		// 设置Trace显示方式
		'trace' =>  [
		    // 使用浏览器console显示页面trace信息
		    'type'  =>  'console',
		],

	控制台方式依然可以查看基本、文件、流程、错误、SQL和调试栏的相关信息。



	Ajax 方式请求的信息不会在页面 Trace 中显示，还包括页面 Trace 之后执行的日志信息也无法再 Trace 中查看到。


##########################################################################################

初见端倪————异常页面
	 
	ThinkPHP5.0 对错误非常严谨，默认情况下， 任何的错误（包括警告错误）系统都会抛出异常。

	第一步是查看异常所在文件源码，错误行会用红色标识，如果要继续一探究竟，那么就要查看下面的 Call Stack 信息，
	这个是显示当前异常的详细 Trace 信息。

	还可以查看完整的异常页面，其实还包含了当前请求的全局变量和常量。



##########################################################################################

拨云见日————断点调试

	系统为断点调试提供了几个有用的方法，诀窍就是通过调试信息不断缩小问题的范围以及诊断变量的变化。

	dump 变量调试输出

	halt 变量调试并中断输出
		halt方法的作用和dump一样，只是在输出变量之后会中断当前程序的执行。

	trace 控制台输出
		如果不希望在页面中输出调试信息，可以使用 trace 方法，该方法输出的信息会在页面 Trace 或者浏览器 Console 
		中显示，使用方法和 dump 是一样的。

##########################################################################################

欲穷千里————日志分析

	系统记录的日志信息在很多时候能够发挥意想不到的作用，默认情况下，系统使用文件方式记录日志，并且按照日期自动分开子目录保存，
	文件结构如下：
	runtime/log
		201705
			05.log
			06.log

	每天会生成一个当天的日志文件，日志文件的内容和页面 Trace 信息的内容类型，但是区别在于所有的请求都会记录，因此日记信息包含
	大量的信息，更加油利于我们分析问题。

	ThinkPHP 对系统的日志按照级别来分类，并且这个日志级别完全可以自己定义，系统内部使用的级别包括：
		log		常规日志 用于记录日志
		error	错误 	 一般会导致程序的终止
		notice	警告 	 程序可以运行但是还不够完美的错误
		info	信息 	 程序输出信息
		debug	调试 	 用于程序信息
		sql   	SQL语句	 用于SQL记录，只在数据库的调试模式开启时有效

	系统提供了不同日记级别的快速记录方法：
		Log::error('错误信息');
		Log::info('日志信息');

	或者使用 trace 方法记录日志
		trace('错误信息','error');
		trace('日志信息','info');


	为了便于分析，还支持设置某些级别的日志信息单独文件记录：(在 think\App\File 下修改，不合理)
		'log'   => [
		    'type'          => 'file', 
		    // error和sql日志单独记录
		    'apart_level'   =>  ['error','sql'],
		],
	设置后，就会单独生成 error 和 sql 两个类型的日志文件，主日志文件将不再包含这两个级别的日志信息：
		runtime/log
		201705
			05.log
			06.log
			06_error.log
			06_sql.log

	定期查看系统的日志文件便于及时发现一些可能存在的隐患，以及给已有的问题提更多依据。

	日志文件可以施工 Socket 方式记录到远程服务器，这就是后面要讲的远程调试功能，当然，你还可以扩展自己的日志记录方式
	来，满足更多的要求。

##########################################################################################

运筹帷幄————远程调试

	远程调试工作暂时不表，将会在下一章 API 开发中详细讲述。