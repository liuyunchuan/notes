快速入门基础：
简介
	ThinkPHP 是一个快速、简单的基于MVC和面向对象的轻量级的PHP开发框架，遵循Apache2 开源协议发布，自2006年诞生以来一直，
秉承简介使用的设计原则，在保持出色的性能和置减代码的同时，尤其注重开发体验和易用性，并且拥有众多的原创功能和特性，为
WEB应用和API开发提供了强有力的支持。

安装
	ThinkPHP提供多个方式的安装，包括官网下载、Composer 安装以及GIT下载。

目录结构(composer)
	application		应用目录
	extend			扩展类库目录（可定义）
	public 			网站对外访问目录
	runtime			运行时目录（可定义）
	vendor			第三方类库目录（composer）
	thinkphp 		框架核心目录
	build.php 		自动生成定义文件（参考）
	composer.json	Composer定义文件
	LICENSE.txt		授权说明文件
	README.md		README 文件
	think 			命令行工具入口

	运行环境 
		ThinkPHP5 的运行环境要求如下：
		PHP>=5.4.0（完美支持PHP7）
		PDO PHP Extension
		MBstring PHP Extension
		CIRL PHP Extension

		我们进入命令行，进入tp5/public目录之后，输入如下命令：
		php -S localhost:8888 router.php
		如果提示错误，请检查你的php.exe 所在路径是否已经加入系统环境变量Path。
		接下来可以直接访问
		http://localhost:8888
		注意：S一定要大写，端口号可以随意设置，只要和已有的不冲突，如果要停止服务，直接在命令行下面按CTRL+C即可推出。


入口文件
	ThinkPHP5.0 版本的默认自带的入口文件空位于public/index.php（实际部署的时候public目录为你的应用对外访问目录）
	入口文件内容如下：
		//定义应用目录
		define('APP_PATH',__DIR__.'/../application/');
		//加载框架引导文件
		require __DIR__.'/../thinkphp/start.php';


资源访问
	网站的资源文件访问不会影响正常的操作访问，只有当访问的资源文件不存在的时候才会解析到入口文件，一般就会提示模块不存在的错误。
	建议规范
		static		静态资源文件
		css			样式目录
		js  		脚本目录
		img			图像目录
	记住，前往不要在目录之外的任何位置放置资源文件，包括 application目录。


调试模式
	ThinkPHP支持调试模式，默认情况下是开始状态。调试模式一除错方便优先，而且在异常的时候可以显示尽可能多的信息，所以对性能有一定
的影响。
	开发完成后，我们实际进行项目部署的时候，修改应用配置文件（application/config.php）中的app_debug配置参数：app_debug=>false。
	为了安全考虑，避免泄露你的服务器WEB目录信息等资料，一定记得正式部署的时候关闭调试模式。


控制器
	根据类的命名空间可以快速定位文件位置，在ThinkPHP5.0 的规范里面，命名空间但其实对应了文件所在目录，app 命名空间通常代表了文件的
起始目录为application，而 think 命名空间则代表了文件的起始目录为 thinkphp/library/think ，后面的命名空间则表示从起始目录开始的子目录。


视图
	现在我们在给控制器添加视图文件功能，我们在 application/index 目录下创建一个 view 目录，然后添加模板文件 view/index/hello.html（注意大小写）。


读取数据
	
总结




URL和路由

URL访问
	ThinkPPH 采用单一入口模式访问应用，对应的所有请求都定向到应用的入口文件，系统会从 URL 参数中国解析当前请求的模块、
控制器和操作，下面是一个标准的 URL 访问格式：http://domainName/index.php/模块/控制器/操作。
	其中 index.php 就称之为应用的入口文件（注意入口文件可以被隐藏）。

	模块在ThinkPHP中的概念其实就是应用目录下的子目录，而官方的规范是目录民小写，因此模块全部采用小写命名，无论URL是否开启大小写转换，
模块名都会强制小写。

	默认情况下，URL地址中的控制器和操作名时不区分大小写的。

	如果控制器是驼峰的，例如定义一个HelloWorld控制器（application/index/controller/HelloWorld.php）。
		正确的URL地址 http://tp5.com/index.php/index/hello_world/index。系统会自动定位到 HelloWorld 控制器类去操作。
	
	如果使用 http://tp5.com/index.php/index/HelloWorld/index 将会报错，并提示HelloWorld控制器类不存在。

	如果希望严格区分大小写访问（这样就可以支持驼峰法进行控制器访问），可以在应用配置文件中设置：
		//关闭URL自动转换（支持驼峰访问控制器）
		'url_convert'=> false,

	5.0 不再支持普通的URL访问方式，所以下面的访问时无效的，你会发现无论输入什么，访问的都是默认的控制器和操作。


参数传入
	通过操作方法的参数绑定功能，可以实现自动获取 URL 的参数。http://tp5.com/index.php/index/index/hello/name/thinkphp。
		http://tp5.com/index.php/index/index/hello/city/shanghai/name/thinkphp 
		或者 http://tp5.com/index.php/index/index/hello?city=shanghai&name=thinkphp 
		还可以进一步对URL地址做简化，前提就是我们必须明确参数的顺序代表的变量，我们更改下 URL 参数的获取方式，把应用配置文件中的
	url_param_type 参数的值修改如下：
			//按照参数顺序获取
			'url_param_type' => 1，
		http://tp5.com/index.php/index/index/hello/thinkphp/shanghai

		按照顺序绑定参数的话，操作方法的参数只能使用URL pathinfo变量，而不能使用 get 或者 post 变量。


隐藏index.php

	可以去掉URL地址里面的入口文件 index.php ，但需要额外配置WEB服务器的重写规则。
	以 Apache 为例，需要在入口文件的同级添加 .htacess 文件（官方默认自带了该文件）
		<IfModule mod_rewrite.c>
		Options +FollowSymlinks -Multiviews
		RewriteEngine on
		RewriteConde %{REQUEST_FILENAME} !-d
		RewriteConde %{REQUEST_FILENAME} !-f
		RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
		</IfModule>


定义路由

	URL地址里面的index模块怎么才能省略呢，默认的URL地址显得有点长，下面就来说说如何通过路由简化URL访问。
	我们在路由定义文件（application/route.php）里面添加一些路由规则：
		return [
			//添加路由规则 路由到 index 控制器的hello操作方法
			'hello/[:name]' => 'index/index/hello',
		]
	该路由规则表示所有的hello开头的并且带参数的访问都会路由到 index 控制器的 hello 操作方法。
	路由之前的 URL 访问地址为： http://tp5.com/index/index/hello/name/thinkphp
	定义路由之后juice只能访问如下 URL 地址 http://tp5.com/hello/thinkphp
	注意：定义路由规则后，原来的URL地址将会失效，变成非法请求。

	当 name 参数没有传入值的时候， hello 方法的 name 参数有默认值 World ，所以输出的内容为 Hello，World。


	除了路由配置文件中定义之外，H还可以采用动态定义路由规则的方式定义，例如在路由配置文件的开头直接添加：
		use think\Route;
		Route:rule('hello/:name','inedx/hello');

	注意路由配置不支持在模块配置文件中设置。


	完整匹配

	前面定义的路由只能以 hello 开头就能进行匹配，如果需要完整匹配，可以使用下面的定义：
		return [
			//路由参数 name 为可选
			'hello/[:name]$' => 'index/hello',
		];

	当路由规则以 $ 结尾的时候就表示当前路由规则需要完整匹配。
	http://tp5.com/hello // 正确匹配
	http://tp5.com/hello/thinkphp // 正确匹配
 	http://tp5.com/hello/thinkphp/val/value // 不会匹配


 	设置 URL 分隔符
 	
 		如果需要改变 URL 地址中的pathifo 参数分隔符，只需要在应用配置文件（application/config.php）中设置：
 			// 设置 pathinfo 分隔符
 			'pathinfo_depr' => '_',

 		路由规则定义无需做任何改变，我们就可以访问下面的额地址：http://tp5.com/hello-thinkphp



路由参数
	我们还可以约束路由规则的请求类型或者URL后缀之类的条件
		return [
			// 定义路由的请求类型和后缀
			'hello/[:name]' =>['index/hello',['method' => 'get','ext' => 'html']],
		];
	上面定义的路由规则限制了必须是 get 请求，而且后缀必须是 html 的，所以下面的访问地址：
	http://tp5.com // 无效
	http://tp5.com/hell.html // 无效
	http://tp5.com/hello/thinkphp // 无效
	http://tp5.com/hello/thinkphp.html // 有效
